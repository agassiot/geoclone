[{"/Users/deltaix/repos/geoProject/client/src/index.js":"1","/Users/deltaix/repos/geoProject/client/src/App.js":"2","/Users/deltaix/repos/geoProject/client/src/reportWebVitals.js":"3","/Users/deltaix/repos/geoProject/client/src/pages/Signup.js":"4","/Users/deltaix/repos/geoProject/client/src/pages/Login.js":"5","/Users/deltaix/repos/geoProject/client/src/pages/SingleThought.js":"6","/Users/deltaix/repos/geoProject/client/src/pages/Score.js":"7","/Users/deltaix/repos/geoProject/client/src/pages/Profile.js":"8","/Users/deltaix/repos/geoProject/client/src/pages/Home.js":"9","/Users/deltaix/repos/geoProject/client/src/pages/ClickToPlay.js":"10","/Users/deltaix/repos/geoProject/client/src/pages/Playing.js":"11","/Users/deltaix/repos/geoProject/client/src/components/Footer/index.js":"12","/Users/deltaix/repos/geoProject/client/src/components/Header/index.js":"13","/Users/deltaix/repos/geoProject/client/src/utils/auth.js":"14","/Users/deltaix/repos/geoProject/client/src/utils/mutations.js":"15","/Users/deltaix/repos/geoProject/client/src/utils/queries.js":"16","/Users/deltaix/repos/geoProject/client/src/components/CommentForm/index.js":"17","/Users/deltaix/repos/geoProject/client/src/components/CommentList/index.js":"18","/Users/deltaix/repos/geoProject/client/src/components/ThoughtList/index.js":"19","/Users/deltaix/repos/geoProject/client/src/components/StreetView/index.js":"20","/Users/deltaix/repos/geoProject/client/src/components/Questions/index.js":"21"},{"size":500,"mtime":1668446356812,"results":"22","hashOfConfig":"23"},{"size":2370,"mtime":1668446356811,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1668446356813,"results":"25","hashOfConfig":"23"},{"size":2672,"mtime":1668446356813,"results":"26","hashOfConfig":"23"},{"size":2794,"mtime":1668506881193,"results":"27","hashOfConfig":"23"},{"size":1562,"mtime":1668446356813,"results":"28","hashOfConfig":"23"},{"size":177,"mtime":1668446356813,"results":"29","hashOfConfig":"23"},{"size":1643,"mtime":1668506146934,"results":"30","hashOfConfig":"23"},{"size":837,"mtime":1668506137128,"results":"31","hashOfConfig":"23"},{"size":273,"mtime":1668446356812,"results":"32","hashOfConfig":"23"},{"size":1706,"mtime":1668502274939,"results":"33","hashOfConfig":"23"},{"size":577,"mtime":1668446356811,"results":"34","hashOfConfig":"23"},{"size":2324,"mtime":1668509296205,"results":"35","hashOfConfig":"23"},{"size":1054,"mtime":1668446356813,"results":"36","hashOfConfig":"23"},{"size":1077,"mtime":1668446356813,"results":"37","hashOfConfig":"23"},{"size":1073,"mtime":1668446356813,"results":"38","hashOfConfig":"23"},{"size":2410,"mtime":1668446356811,"results":"39","hashOfConfig":"23"},{"size":953,"mtime":1668446356811,"results":"40","hashOfConfig":"23"},{"size":1502,"mtime":1668446356812,"results":"41","hashOfConfig":"23"},{"size":1852,"mtime":1668502425588,"results":"42","hashOfConfig":"23"},{"size":379,"mtime":1668500556169,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"xau14b",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/deltaix/repos/geoProject/client/src/index.js",[],["91","92"],"/Users/deltaix/repos/geoProject/client/src/App.js",[],"/Users/deltaix/repos/geoProject/client/src/reportWebVitals.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Signup.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Login.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/SingleThought.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Score.js",["93"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Scores = () => {\n    return (\n        <main>\n        \n        </main>\n    )\n}\n\nexport default Scores;\n","/Users/deltaix/repos/geoProject/client/src/pages/Profile.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Home.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/ClickToPlay.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Playing.js",["94","95"],"import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport { QUERY_LOCATIONS } from \"../utils/queries\";\nimport StreetView from \"../components/StreetView\";\nimport Questions from \"../components/Questions\";\n\nconst Playing = () => {\n  const { loading, data } = useQuery(QUERY_LOCATIONS);\n  const locations= data?.locations|| [];\n  if (loading) return (<div>loading...</div>)\n console.log(locations)\n let rand = Math.floor(Math.random() * 2);\n\n  return (\n    <main>\n      {/* Rendering Street View */}\n      <StreetView rand={rand}/>\n      {/* <Questions></Questions> */}\n      {/* Render multiple choices down below */}\n      <h3>Multiple Choice: What city are you in?</h3>\n      <ul>\n      {locations[rand].answerChoice.map(choices =>(<button className=\"relative inline-flex px-16 pl-16 items-center justify-flex-end p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-pink-500 to-orange-400 group-hover:from-pink-500 group-hover:to-orange-400 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800\">\n  <span className=\"relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0\">\n     <li key={choices}>{choices}</li>\n  </span>\n</button>))}\n      </ul>\n    </main>\n  );\n\n  function questionValidation(choice) {\n    console.log(choice);\n    // console.log(locations.locationName);\n    console.log(locations[rand]);\n    if (choice === locations[rand].locationName)\n      console.log(\"You are correct!\");\n    else {\n      console.log(\"You are Wrong!\");\n    }\n    // window.location.reload();\n  }\n};\n\nexport default Playing;\n","/Users/deltaix/repos/geoProject/client/src/components/Footer/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/Header/index.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/auth.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/mutations.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/queries.js",[],"/Users/deltaix/repos/geoProject/client/src/components/CommentForm/index.js",["96"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_COMMENT } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nconst CommentForm = ({ thoughtId }) => {\n  const [commentText, setCommentText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addComment, { error }] = useMutation(ADD_COMMENT);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addComment({\n        variables: {\n          thoughtId,\n          commentText,\n          commentAuthor: Auth.getProfile().data.username,\n        },\n      });\n\n      setCommentText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'commentText' && value.length <= 280) {\n      setCommentText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div>\n      <h4>What are your thoughts on this thought?</h4>\n\n      {Auth.loggedIn() ? (\n        <>\n          <p\n            className={`m-0 ${\n              characterCount === 280 || error ? 'text-danger' : ''\n            }`}\n          >\n            Character Count: {characterCount}/280\n            {error && <span className=\"ml-2\">{error.message}</span>}\n          </p>\n          <form\n            className=\"flex-row justify-center justify-space-between-md align-center\"\n            onSubmit={handleFormSubmit}\n          >\n            <div className=\"col-12 col-lg-9\">\n              <textarea\n                name=\"commentText\"\n                placeholder=\"Add your comment...\"\n                value={commentText}\n                className=\"form-input w-100\"\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\n                onChange={handleChange}\n              ></textarea>\n            </div>\n\n            <div className=\"col-12 col-lg-3\">\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n                Add Comment\n              </button>\n            </div>\n          </form>\n        </>\n      ) : (\n        <p>\n          You need to be logged in to share your thoughts. Please{' '}\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default CommentForm;\n","/Users/deltaix/repos/geoProject/client/src/components/CommentList/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/ThoughtList/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/StreetView/index.js",["97"],"import ReactStreetview from \"react-streetview\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_LOCATIONS } from \"../../utils/queries\";\nimport { useEffect, useState } from \"react\";\n\nconsole.log(process.env);\n// import * dotenv from 'dotenv'\n// dotenv.config()\n\nfunction StreetView({ rand }) {\n  const { loading, data } = useQuery(QUERY_LOCATIONS);\n  const [apiKey, setApiKey] = useState(\"\");\n  const locations = data?.locations || [];\n  useEffect(async () => {\n    const response = await fetch(\"/googleMapAPI\");\n\n    const apiKey = await response.json();\n\n    setApiKey(apiKey);\n  }, []);\n  //rand = Math.floor(Math.random() * 2);\n  if (loading) return <div>loading...</div>;\n  // see https://developers.google.com/maps/documentation/javascript\n  const googleMapsApiKey = apiKey;\n  //rand = 0;\n  let latitude = locations[rand].latitude;\n  console.log(latitude);\n  let longitude = locations[rand].longitude;\n  console.log(longitude);\n\n\n\n  // see https://developers.google.com/maps/documentation/javascript/3.exp/reference#StreetViewPanoramaOptions\n  const streetViewPanoramaOptions = {\n    position: { lat: latitude, lng:  longitude },\n    pov: { heading: 100, pitch: 0 },\n    zoom: 1,\n  };\n\n  if (!apiKey) return null;\n\n  return (\n    <div\n      style={{\n        width: \"1200px\",\n        height: \"700px\",\n        backgroundColor: \"#eeeeee\",\n        position: \"relative\",\n      }}\n    >\n      <h4\n        style={{\n          top: \"0px\",\n          left: \"0px\",\n          height: \"75px\",\n          width: \"250px\",\n          position: \"absolute\",\n          backgroundColor: \"white\",\n          zIndex: \"2\",\n        }}\n      >\n        {\" \"}\n        Where are we?\n      </h4>\n      <ReactStreetview\n        apiKey={googleMapsApiKey}\n        streetViewPanoramaOptions={streetViewPanoramaOptions}\n      />\n    </div>\n  );\n}\n\nexport default StreetView;\n","/Users/deltaix/repos/geoProject/client/src/components/Questions/index.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":14},{"ruleId":"102","severity":1,"message":"106","line":6,"column":8,"nodeType":"104","messageId":"105","endLine":6,"endColumn":17},{"ruleId":"102","severity":1,"message":"107","line":32,"column":12,"nodeType":"104","messageId":"105","endLine":32,"endColumn":30},{"ruleId":"102","severity":1,"message":"108","line":19,"column":15,"nodeType":"104","messageId":"105","endLine":19,"endColumn":19},{"ruleId":"109","severity":1,"message":"110","line":14,"column":13,"nodeType":"111","endLine":20,"endColumn":4},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Questions' is defined but never used.","'questionValidation' is defined but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]