[{"/Users/deltaix/repos/geoProject/client/src/index.js":"1","/Users/deltaix/repos/geoProject/client/src/App.js":"2","/Users/deltaix/repos/geoProject/client/src/reportWebVitals.js":"3","/Users/deltaix/repos/geoProject/client/src/pages/Signup.js":"4","/Users/deltaix/repos/geoProject/client/src/pages/Home.js":"5","/Users/deltaix/repos/geoProject/client/src/pages/Profile.js":"6","/Users/deltaix/repos/geoProject/client/src/pages/ClickToPlay.js":"7","/Users/deltaix/repos/geoProject/client/src/pages/Playing.js":"8","/Users/deltaix/repos/geoProject/client/src/pages/Login.js":"9","/Users/deltaix/repos/geoProject/client/src/pages/SingleThought.js":"10","/Users/deltaix/repos/geoProject/client/src/pages/Score.js":"11","/Users/deltaix/repos/geoProject/client/src/components/Footer/index.js":"12","/Users/deltaix/repos/geoProject/client/src/components/Header/index.js":"13","/Users/deltaix/repos/geoProject/client/src/utils/queries.js":"14","/Users/deltaix/repos/geoProject/client/src/utils/mutations.js":"15","/Users/deltaix/repos/geoProject/client/src/utils/auth.js":"16","/Users/deltaix/repos/geoProject/client/src/components/ThoughtList/index.js":"17","/Users/deltaix/repos/geoProject/client/src/components/ThoughtForm/index.js":"18","/Users/deltaix/repos/geoProject/client/src/components/CommentList/index.js":"19","/Users/deltaix/repos/geoProject/client/src/components/CommentForm/index.js":"20","/Users/deltaix/repos/geoProject/client/src/components/Questions/index.js":"21","/Users/deltaix/repos/geoProject/client/src/components/StreetView/index.js":"22"},{"size":500,"mtime":1668446356812,"results":"23","hashOfConfig":"24"},{"size":2370,"mtime":1668446356811,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1668446356813,"results":"26","hashOfConfig":"24"},{"size":2672,"mtime":1668446356813,"results":"27","hashOfConfig":"24"},{"size":907,"mtime":1668446356812,"results":"28","hashOfConfig":"24"},{"size":1724,"mtime":1668446356813,"results":"29","hashOfConfig":"24"},{"size":273,"mtime":1668446356812,"results":"30","hashOfConfig":"24"},{"size":834,"mtime":1668446610787,"results":"31","hashOfConfig":"24"},{"size":2478,"mtime":1668446356812,"results":"32","hashOfConfig":"24"},{"size":1562,"mtime":1668446356813,"results":"33","hashOfConfig":"24"},{"size":177,"mtime":1668446356813,"results":"34","hashOfConfig":"24"},{"size":577,"mtime":1668446356811,"results":"35","hashOfConfig":"24"},{"size":1322,"mtime":1668446356811,"results":"36","hashOfConfig":"24"},{"size":1073,"mtime":1668446356813,"results":"37","hashOfConfig":"24"},{"size":1077,"mtime":1668446356813,"results":"38","hashOfConfig":"24"},{"size":1054,"mtime":1668446356813,"results":"39","hashOfConfig":"24"},{"size":1502,"mtime":1668446356812,"results":"40","hashOfConfig":"24"},{"size":3080,"mtime":1668446356812,"results":"41","hashOfConfig":"24"},{"size":953,"mtime":1668446356811,"results":"42","hashOfConfig":"24"},{"size":2410,"mtime":1668446356811,"results":"43","hashOfConfig":"24"},{"size":350,"mtime":1668446356811,"results":"44","hashOfConfig":"24"},{"size":1495,"mtime":1668446561804,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xau14b",{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},"/Users/deltaix/repos/geoProject/client/src/index.js",[],"/Users/deltaix/repos/geoProject/client/src/App.js",[],"/Users/deltaix/repos/geoProject/client/src/reportWebVitals.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Signup.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Home.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Profile.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/ClickToPlay.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Playing.js",["95"],"import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport { QUERY_LOCATIONS } from \"../utils/queries\";\nimport StreetView from \"../components/StreetView\";\nimport Questions from \"../components/Questions\";\n\n\n\nconst Playing = () => {\n  const { loading, data } = useQuery(QUERY_LOCATIONS);\n  const locations= data?.locations|| [];\n  if (loading) return (<div>loading...</div>)\n console.log(locations)\n let rand = Math.floor(Math.random() * 2);\n\n  return (\n    <main>\n      {/* Rendering Street View */}\n      <StreetView rand={rand}/>\n      {/* <Questions></Questions> */}\n      {/* Render multiple choices down below */}\n      <h3>Multiple Choice: What city are you in?</h3>\n      <ul>\n        {locations[rand].answerChoice.map(choices =>(<li>{choices}</li>))}\n      </ul>\n    </main>\n  );\n};\n\nexport default Playing;\n","/Users/deltaix/repos/geoProject/client/src/pages/Login.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/SingleThought.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Score.js",["96"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Scores = () => {\n    return (\n        <main>\n        \n        </main>\n    )\n}\n\nexport default Scores;\n","/Users/deltaix/repos/geoProject/client/src/components/Footer/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/Header/index.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/queries.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/mutations.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/auth.js",[],"/Users/deltaix/repos/geoProject/client/src/components/ThoughtList/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/ThoughtForm/index.js",["97"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\n\nimport Auth from '../../utils/auth';\n\nconst ThoughtForm = () => {\n  const [thoughtText, setThoughtText] = useState('');\n\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n    update(cache, { data: { addThought } }) {\n      try {\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: { thoughts: [addThought, ...thoughts] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n      // update me object's cache\n      const { me } = cache.readQuery({ query: QUERY_ME });\n      cache.writeQuery({\n        query: QUERY_ME,\n        data: { me: { ...me, thoughts: [...me.thoughts, addThought] } },\n      });\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addThought({\n        variables: {\n          thoughtText,\n          thoughtAuthor: Auth.getProfile().data.username,\n        },\n      });\n\n      setThoughtText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'thoughtText' && value.length <= 280) {\n      setThoughtText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div>\n      <h3>What's on your techy mind?</h3>\n\n      {Auth.loggedIn() ? (\n        <>\n          <p\n            className={`m-0 ${\n              characterCount === 280 || error ? 'text-danger' : ''\n            }`}\n          >\n            Character Count: {characterCount}/280\n          </p>\n          <form\n            className=\"flex-row justify-center justify-space-between-md align-center\"\n            onSubmit={handleFormSubmit}\n          >\n            <div className=\"col-12 col-lg-9\">\n              <textarea\n                name=\"thoughtText\"\n                placeholder=\"Here's a new thought...\"\n                value={thoughtText}\n                className=\"form-input w-100\"\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\n                onChange={handleChange}\n              ></textarea>\n            </div>\n\n            <div className=\"col-12 col-lg-3\">\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n                Add Thought\n              </button>\n            </div>\n            {error && (\n              <div className=\"col-12 my-3 bg-danger text-white p-3\">\n                {error.message}\n              </div>\n            )}\n          </form>\n        </>\n      ) : (\n        <p>\n          You need to be logged in to share your thoughts. Please{' '}\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n","/Users/deltaix/repos/geoProject/client/src/components/CommentList/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/CommentForm/index.js",["98"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_COMMENT } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nconst CommentForm = ({ thoughtId }) => {\n  const [commentText, setCommentText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addComment, { error }] = useMutation(ADD_COMMENT);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addComment({\n        variables: {\n          thoughtId,\n          commentText,\n          commentAuthor: Auth.getProfile().data.username,\n        },\n      });\n\n      setCommentText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'commentText' && value.length <= 280) {\n      setCommentText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div>\n      <h4>What are your thoughts on this thought?</h4>\n\n      {Auth.loggedIn() ? (\n        <>\n          <p\n            className={`m-0 ${\n              characterCount === 280 || error ? 'text-danger' : ''\n            }`}\n          >\n            Character Count: {characterCount}/280\n            {error && <span className=\"ml-2\">{error.message}</span>}\n          </p>\n          <form\n            className=\"flex-row justify-center justify-space-between-md align-center\"\n            onSubmit={handleFormSubmit}\n          >\n            <div className=\"col-12 col-lg-9\">\n              <textarea\n                name=\"commentText\"\n                placeholder=\"Add your comment...\"\n                value={commentText}\n                className=\"form-input w-100\"\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\n                onChange={handleChange}\n              ></textarea>\n            </div>\n\n            <div className=\"col-12 col-lg-3\">\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n                Add Comment\n              </button>\n            </div>\n          </form>\n        </>\n      ) : (\n        <p>\n          You need to be logged in to share your thoughts. Please{' '}\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default CommentForm;\n","/Users/deltaix/repos/geoProject/client/src/components/Questions/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/StreetView/index.js",["99","100"],"import ReactStreetview from \"react-streetview\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_LOCATIONS } from \"../../utils/queries\";\n\nconsole.log(process.env);\n// import * dotenv from 'dotenv'\n// dotenv.config()\n\nfunction StreetView() {\n  const { loading, data } = useQuery(QUERY_LOCATIONS);\n  const locations= data?.locations|| [];\n  if (loading) return (<div>loading...</div>)\n  // see https://developers.google.com/maps/documentation/javascript\n  const googleMapsApiKey = process.env.REACT_APP_googleMapsApiKey;\n\n\n  let latitude = locations[rand].latitude;\n  let longitude = locations[rand].longitude;\n  // see https://developers.google.com/maps/documentation/javascript/3.exp/reference#StreetViewPanoramaOptions\n  const streetViewPanoramaOptions = {\n    position: { lat: latitude, lng:  longitude },\n    pov: { heading: 100, pitch: 0 },\n    zoom: 1,\n  };\n\n  return (\n    <div\n      style={{\n        width: \"1200px\",\n        height: \"700px\",\n        backgroundColor: \"#eeeeee\",\n        position: \"relative\",\n      }}\n    >\n      <h4\n        style={{\n          top: \"0px\",\n          left: \"0px\",\n          height: \"75px\",\n          width: \"200px\",\n          position: \"absolute\",\n          backgroundColor: \"white\",\n          zIndex: \"2\",\n        }}\n      >\n        {\" \"}\n        Where are we?\n      </h4>\n      <ReactStreetview\n        apiKey={googleMapsApiKey}\n        streetViewPanoramaOptions={streetViewPanoramaOptions}\n      />\n    </div>\n  );\n}\n\nexport default StreetView;\n",{"ruleId":"101","severity":1,"message":"102","line":6,"column":8,"nodeType":"103","messageId":"104","endLine":6,"endColumn":17},{"ruleId":"101","severity":1,"message":"105","line":2,"column":10,"nodeType":"103","messageId":"104","endLine":2,"endColumn":14},{"ruleId":"101","severity":1,"message":"106","line":41,"column":15,"nodeType":"103","messageId":"104","endLine":41,"endColumn":19},{"ruleId":"101","severity":1,"message":"106","line":19,"column":15,"nodeType":"103","messageId":"104","endLine":19,"endColumn":19},{"ruleId":"107","severity":2,"message":"108","line":17,"column":28,"nodeType":"103","messageId":"109","endLine":17,"endColumn":32},{"ruleId":"107","severity":2,"message":"108","line":18,"column":29,"nodeType":"103","messageId":"109","endLine":18,"endColumn":33},"no-unused-vars","'Questions' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'data' is assigned a value but never used.","no-undef","'rand' is not defined.","undef"]