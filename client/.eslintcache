[{"/Users/deltaix/repos/geoProject/client/src/index.js":"1","/Users/deltaix/repos/geoProject/client/src/App.js":"2","/Users/deltaix/repos/geoProject/client/src/reportWebVitals.js":"3","/Users/deltaix/repos/geoProject/client/src/pages/Signup.js":"4","/Users/deltaix/repos/geoProject/client/src/pages/Login.js":"5","/Users/deltaix/repos/geoProject/client/src/pages/SingleThought.js":"6","/Users/deltaix/repos/geoProject/client/src/pages/Score.js":"7","/Users/deltaix/repos/geoProject/client/src/pages/Profile.js":"8","/Users/deltaix/repos/geoProject/client/src/pages/Home.js":"9","/Users/deltaix/repos/geoProject/client/src/pages/ClickToPlay.js":"10","/Users/deltaix/repos/geoProject/client/src/pages/Playing.js":"11","/Users/deltaix/repos/geoProject/client/src/components/Footer/index.js":"12","/Users/deltaix/repos/geoProject/client/src/components/Header/index.js":"13","/Users/deltaix/repos/geoProject/client/src/utils/auth.js":"14","/Users/deltaix/repos/geoProject/client/src/utils/mutations.js":"15","/Users/deltaix/repos/geoProject/client/src/utils/queries.js":"16","/Users/deltaix/repos/geoProject/client/src/components/CommentForm/index.js":"17","/Users/deltaix/repos/geoProject/client/src/components/CommentList/index.js":"18","/Users/deltaix/repos/geoProject/client/src/components/ThoughtList/index.js":"19","/Users/deltaix/repos/geoProject/client/src/components/StreetView/index.js":"20","/Users/deltaix/repos/geoProject/client/src/components/Questions/index.js":"21","/Users/deltaix/repos/geoProject/client/src/pages/Landing.js":"22"},{"size":500,"mtime":1668446356812,"results":"23","hashOfConfig":"24"},{"size":2373,"mtime":1668512992286,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1668446356813,"results":"26","hashOfConfig":"24"},{"size":3337,"mtime":1668514029401,"results":"27","hashOfConfig":"24"},{"size":2478,"mtime":1668511324051,"results":"28","hashOfConfig":"24"},{"size":1562,"mtime":1668446356813,"results":"29","hashOfConfig":"24"},{"size":177,"mtime":1668446356813,"results":"30","hashOfConfig":"24"},{"size":1643,"mtime":1668506146934,"results":"31","hashOfConfig":"24"},{"size":837,"mtime":1668506137128,"results":"32","hashOfConfig":"24"},{"size":273,"mtime":1668446356812,"results":"33","hashOfConfig":"24"},{"size":1606,"mtime":1668513627520,"results":"34","hashOfConfig":"24"},{"size":577,"mtime":1668446356811,"results":"35","hashOfConfig":"24"},{"size":3282,"mtime":1668513607969,"results":"36","hashOfConfig":"24"},{"size":1054,"mtime":1668446356813,"results":"37","hashOfConfig":"24"},{"size":1077,"mtime":1668446356813,"results":"38","hashOfConfig":"24"},{"size":1073,"mtime":1668446356813,"results":"39","hashOfConfig":"24"},{"size":2410,"mtime":1668446356811,"results":"40","hashOfConfig":"24"},{"size":953,"mtime":1668446356811,"results":"41","hashOfConfig":"24"},{"size":1502,"mtime":1668446356812,"results":"42","hashOfConfig":"24"},{"size":1837,"mtime":1668513524567,"results":"43","hashOfConfig":"24"},{"size":379,"mtime":1668500556169,"results":"44","hashOfConfig":"24"},{"size":1760,"mtime":1668510573359,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"xau14b",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"/Users/deltaix/repos/geoProject/client/src/index.js",[],["97","98"],"/Users/deltaix/repos/geoProject/client/src/App.js",["99"],"import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nimport Home from \"./pages/Home\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport ClickToPlay from \"./pages/ClickToPlay\";\nimport Playing from \"./pages/Playing\";\nimport Score from \"./pages/Score\";\nimport SingleThought from \"./pages/SingleThought\";\nimport Profile from \"./pages/Profile\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Routes>\n              <Route path=\"/\" element={<Playing />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/clicktoplay\" element={<ClickToPlay />} />\n              <Route path=\"/playing\" element={<Playing />} />\n              <Route path=\"/score\" element={<Score />} />\n              <Route path=\"/signup\" element={<Signup />} />\n              <Route path=\"/me\" element={<Profile />} />\n              <Route path=\"/profiles/:username\" element={<Profile />} />\n              <Route path=\"/thoughts/:thoughtId\" element={<SingleThought />} />\n            </Routes>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","/Users/deltaix/repos/geoProject/client/src/reportWebVitals.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Signup.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Login.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/SingleThought.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Score.js",["100"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Scores = () => {\n    return (\n        <main>\n        \n        </main>\n    )\n}\n\nexport default Scores;\n","/Users/deltaix/repos/geoProject/client/src/pages/Profile.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Home.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/ClickToPlay.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Playing.js",["101","102"],"import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport { QUERY_LOCATIONS } from \"../utils/queries\";\nimport StreetView from \"../components/StreetView\";\nimport Questions from \"../components/Questions\";\n\nconst Playing = () => {\n  const { loading, data } = useQuery(QUERY_LOCATIONS);\n  const locations= data?.locations|| [];\n  if (loading) return (<div>loading...</div>)\n console.log(locations)\n let rand = Math.floor(Math.random() * 2);\n\n  return (\n    <main>\n\n    <div> \n      <StreetView rand={rand}/>\n    </div>\n      <h3>Multiple Choice: What city are you in?</h3>\n      <ul>\n      {locations[rand].answerChoice.map(choices =>(<button className=\"relative inline-flex px-16 pl-16 items-center justify-flex-end p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-pink-500 to-orange-400 group-hover:from-pink-500 group-hover:to-orange-400 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800\">\n  <span className=\"relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0\">\n     <li key={choices}>{choices}</li>\n  </span>\n</button>))}\n      </ul>\n    </main>\n  );\n\n  function questionValidation(choice) {\n    console.log(choice);\n    // console.log(locations.locationName);\n    console.log(locations[rand]);\n    if (choice === locations[rand].locationName)\n      console.log(\"You are correct!\");\n    else {\n      console.log(\"You are Wrong!\");\n    }\n    // window.location.reload();\n  }\n};\n\nexport default Playing;\n","/Users/deltaix/repos/geoProject/client/src/components/Footer/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/Header/index.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/auth.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/mutations.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/queries.js",[],"/Users/deltaix/repos/geoProject/client/src/components/CommentForm/index.js",["103"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_COMMENT } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nconst CommentForm = ({ thoughtId }) => {\n  const [commentText, setCommentText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addComment, { error }] = useMutation(ADD_COMMENT);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addComment({\n        variables: {\n          thoughtId,\n          commentText,\n          commentAuthor: Auth.getProfile().data.username,\n        },\n      });\n\n      setCommentText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'commentText' && value.length <= 280) {\n      setCommentText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div>\n      <h4>What are your thoughts on this thought?</h4>\n\n      {Auth.loggedIn() ? (\n        <>\n          <p\n            className={`m-0 ${\n              characterCount === 280 || error ? 'text-danger' : ''\n            }`}\n          >\n            Character Count: {characterCount}/280\n            {error && <span className=\"ml-2\">{error.message}</span>}\n          </p>\n          <form\n            className=\"flex-row justify-center justify-space-between-md align-center\"\n            onSubmit={handleFormSubmit}\n          >\n            <div className=\"col-12 col-lg-9\">\n              <textarea\n                name=\"commentText\"\n                placeholder=\"Add your comment...\"\n                value={commentText}\n                className=\"form-input w-100\"\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\n                onChange={handleChange}\n              ></textarea>\n            </div>\n\n            <div className=\"col-12 col-lg-3\">\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n                Add Comment\n              </button>\n            </div>\n          </form>\n        </>\n      ) : (\n        <p>\n          You need to be logged in to share your thoughts. Please{' '}\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default CommentForm;\n","/Users/deltaix/repos/geoProject/client/src/components/CommentList/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/ThoughtList/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/StreetView/index.js",["104"],"import ReactStreetview from \"react-streetview\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_LOCATIONS } from \"../../utils/queries\";\nimport { useEffect, useState } from \"react\";\n\nconsole.log(process.env);\n// import * dotenv from 'dotenv'\n// dotenv.config()\n\nfunction StreetView({ rand }) {\n  const { loading, data } = useQuery(QUERY_LOCATIONS);\n  const [apiKey, setApiKey] = useState(\"\");\n  const locations = data?.locations || [];\n  useEffect(async () => {\n    const response = await fetch(\"/googleMapAPI\");\n\n    const apiKey = await response.json();\n\n    setApiKey(apiKey);\n  }, []);\n  //rand = Math.floor(Math.random() * 2);\n  if (loading) return <div>loading...</div>;\n  // see https://developers.google.com/maps/documentation/javascript\n  const googleMapsApiKey = apiKey;\n  //rand = 0;\n  let latitude = locations[rand].latitude;\n  console.log(latitude);\n  let longitude = locations[rand].longitude;\n  console.log(longitude);\n\n\n\n  // see https://developers.google.com/maps/documentation/javascript/3.exp/reference#StreetViewPanoramaOptions\n  const streetViewPanoramaOptions = {\n    position: { lat: latitude, lng:  longitude },\n    pov: { heading: 100, pitch: 0 },\n    zoom: 1,\n  };\n\n  if (!apiKey) return null;\n\n  return (\n    <div\n      style={{\n        width: \"1200px\",\n        height: \"700px\",\n        backgroundColor: \"#eeeeee\",\n        position: \"relative\",\n      }}\n    >\n      <h4\n        style={{\n          top: \"0px\",\n          left: \"0px\",\n          height: \"75px\",\n          width: \"250px\",\n          position: \"absolute\",\n          backgroundColor: \"white\",\n          zIndex: \"2\",\n        }}\n      >\n        {\" \"}\n      \n      </h4>\n      <ReactStreetview\n        apiKey={googleMapsApiKey}\n        streetViewPanoramaOptions={streetViewPanoramaOptions}\n      />\n    </div>\n  );\n}\n\nexport default StreetView;\n","/Users/deltaix/repos/geoProject/client/src/components/Questions/index.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Landing.js",[],["105","106"],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":11,"column":8,"nodeType":"113","messageId":"114","endLine":11,"endColumn":12},{"ruleId":"111","severity":1,"message":"115","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":14},{"ruleId":"111","severity":1,"message":"116","line":6,"column":8,"nodeType":"113","messageId":"114","endLine":6,"endColumn":17},{"ruleId":"111","severity":1,"message":"117","line":32,"column":12,"nodeType":"113","messageId":"114","endLine":32,"endColumn":30},{"ruleId":"111","severity":1,"message":"118","line":19,"column":15,"nodeType":"113","messageId":"114","endLine":19,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":14,"column":13,"nodeType":"121","endLine":20,"endColumn":4},{"ruleId":"107","replacedBy":"122"},{"ruleId":"109","replacedBy":"123"},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Questions' is defined but never used.","'questionValidation' is defined but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["124"],["125"],"no-global-assign","no-unsafe-negation"]