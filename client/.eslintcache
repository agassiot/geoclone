[{"/Users/deltaix/repos/geoProject/client/src/index.js":"1","/Users/deltaix/repos/geoProject/client/src/reportWebVitals.js":"2","/Users/deltaix/repos/geoProject/client/src/App.js":"3","/Users/deltaix/repos/geoProject/client/src/pages/Home.js":"4","/Users/deltaix/repos/geoProject/client/src/pages/Login.js":"5","/Users/deltaix/repos/geoProject/client/src/pages/Signup.js":"6","/Users/deltaix/repos/geoProject/client/src/pages/Landing.js":"7","/Users/deltaix/repos/geoProject/client/src/pages/ClickToPlay.js":"8","/Users/deltaix/repos/geoProject/client/src/pages/Playing.js":"9","/Users/deltaix/repos/geoProject/client/src/pages/Score.js":"10","/Users/deltaix/repos/geoProject/client/src/components/Footer/index.js":"11","/Users/deltaix/repos/geoProject/client/src/utils/queries.js":"12","/Users/deltaix/repos/geoProject/client/src/utils/auth.js":"13","/Users/deltaix/repos/geoProject/client/src/utils/mutations.js":"14","/Users/deltaix/repos/geoProject/client/src/components/ThoughtList/index.js":"15","/Users/deltaix/repos/geoProject/client/src/components/StreetView/index.js":"16"},{"size":500,"mtime":1668446356812,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1668446356813,"results":"19","hashOfConfig":"18"},{"size":2379,"mtime":1668524600278,"results":"20","hashOfConfig":"18"},{"size":836,"mtime":1668524600280,"results":"21","hashOfConfig":"18"},{"size":3276,"mtime":1668524600280,"results":"22","hashOfConfig":"18"},{"size":4479,"mtime":1668524600281,"results":"23","hashOfConfig":"18"},{"size":2368,"mtime":1668524600280,"results":"24","hashOfConfig":"18"},{"size":528,"mtime":1668524600280,"results":"25","hashOfConfig":"18"},{"size":2544,"mtime":1668526750725,"results":"26","hashOfConfig":"18"},{"size":595,"mtime":1668524600281,"results":"27","hashOfConfig":"18"},{"size":316,"mtime":1668526823019,"results":"28","hashOfConfig":"18"},{"size":1073,"mtime":1668446356813,"results":"29","hashOfConfig":"18"},{"size":1054,"mtime":1668446356813,"results":"30","hashOfConfig":"18"},{"size":1077,"mtime":1668446356813,"results":"31","hashOfConfig":"18"},{"size":1502,"mtime":1668446356812,"results":"32","hashOfConfig":"18"},{"size":1987,"mtime":1668526946167,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"xau14b",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/deltaix/repos/geoProject/client/src/index.js",[],["68","69"],"/Users/deltaix/repos/geoProject/client/src/reportWebVitals.js",[],"/Users/deltaix/repos/geoProject/client/src/App.js",["70"],"import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nimport Home from \"./pages/Home\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport ClickToPlay from \"./pages/ClickToPlay\";\nimport Playing from \"./pages/Playing\";\nimport Score from \"./pages/Score\";\nimport Landing from \"./pages/Landing\";\n// import SingleThought from \"./pages/SingleThought\";\n// import Profile from \"./pages/Profile\";\nimport Footer from \"./components/Footer\";\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <div className=\"container\">\n            <Routes>\n              <Route path=\"/\" element={<Landing />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/clicktoplay\" element={<ClickToPlay />} />\n              <Route path=\"/playing\" element={<Playing />} />\n              <Route path=\"/score\" element={<Score />} />\n              <Route path=\"/signup\" element={<Signup />} />\n              {/* <Route path=\"/me\" element={<Profile />} /> */}\n              {/* <Route path=\"/profiles/:username\" element={<Profile />} /> */}\n              {/* <Route path=\"/thoughts/:thoughtId\" element={<SingleThought />} /> */}\n            </Routes>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","/Users/deltaix/repos/geoProject/client/src/pages/Home.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Login.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Signup.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Landing.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/ClickToPlay.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Playing.js",[],"/Users/deltaix/repos/geoProject/client/src/pages/Score.js",[],"/Users/deltaix/repos/geoProject/client/src/components/Footer/index.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/queries.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/auth.js",[],"/Users/deltaix/repos/geoProject/client/src/utils/mutations.js",[],"/Users/deltaix/repos/geoProject/client/src/components/ThoughtList/index.js",[],"/Users/deltaix/repos/geoProject/client/src/components/StreetView/index.js",["71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":11,"column":8,"nodeType":"78","messageId":"79","endLine":11,"endColumn":12},{"ruleId":"80","severity":1,"message":"81","line":14,"column":13,"nodeType":"82","endLine":18,"endColumn":4},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]